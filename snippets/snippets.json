{
	"Beats Per Minute": {
		"prefix": "bpm",
		"body": [
			"bpm(${1:beats-per-minute})"
		],
		"description": "set the Beats Per Minute (BPM) [1..300]; default is 120"
	},
	"Beats in a Bar": {
		"prefix": "biab",
		"body": [
			"biab(${1:beats-in-a-bar})"
		],
		"description": "set the Beats in a Bar; default is 4"
	},
	"Chord creator": {
		"prefix": "cho",
		"body": [
			"chord('${1:note}')"
		],
		"description": "create a Chord from its string \u003ca href=\"/docs/reference/notations/#chord\"\u003eformat\u003c/a\u003e"
	},
	"Chord progression creator": {
		"prefix": "pro",
		"body": [
			"progression('${1:scale}','${2:space-separated-roman-chords}')"
		],
		"description": "create a Chord progression using this \u003ca href=\"/docs/reference/notations/#chordprogression\"\u003eformat\u003c/a\u003e"
	},
	"Duration calculator": {
		"prefix": "dur",
		"body": [
			"duration(${1:object})"
		],
		"description": "computes the duration of the object using the current BPM"
	},
	"Duration fraction operator": {
		"prefix": "fra",
		"body": [
			"fraction(${1:object},${2:object})"
		],
		"description": "Creates a new object for which the fraction of duration of all notes are changed.\nThe first parameter controls the fraction of the note, e.g. 1 = whole, 2 = half, 4 = quarter, 8 = eight, 16 = sixteenth.\nFraction can also be an exact float value between 0 and 1.\n"
	},
	"Dynamic Map creator": {
		"prefix": "dyna",
		"body": [
			"dynamicmap('${1:mapping}',${2:object})"
		],
		"description": "changes the dynamic of notes from a musical object. 1-index-based mapping"
	},
	"Dynamic operator": {
		"prefix": "dy",
		"body": [
			"dynamic(${1:emphasis},${2:object})"
		],
		"description": "Creates a new modified musical object for which the dynamics of all notes are changed.\n\tThe first parameter controls the emphasis the note, e.g. + (mezzoforte,mf), -- (piano,p) or a velocity [0..127].\n\t"
	},
	"Fraction Map operator": {
		"prefix": "frm",
		"body": [
			"fractionmap('${1:fraction-mapping}',${2:object})"
		],
		"description": "create a sequence with notes for which the fractions are changed. 1-based indexing. use space or comma as separator"
	},
	"Group operator": {
		"prefix": "gro",
		"body": [
			"group(${1:sequenceable})"
		],
		"description": "create a new sequence in which all notes of a musical object are grouped"
	},
	"Index getter": {
		"prefix": "at",
		"body": [
			"at(${1:index},${2:object})"
		],
		"description": "create an index getter (1-based) to select a musical object"
	},
	"Interval creator": {
		"prefix": "int",
		"body": [
			"interval(${1:from},${2:to},${3:by})"
		],
		"description": "create an integer repeating interval (from,to,by,method). Default method is 'repeat', Use next() to get a new integer"
	},
	"Iterator creator": {
		"prefix": "it",
		"body": [
			"iterator(${1:array-element})"
		],
		"description": "iterator that has an array of constant values and evaluates to one. Use next() to increase and rotate the value."
	},
	"Join Map creator": {
		"prefix": "joinm",
		"body": [
			"joinmap('${1:indices}',${2:join})"
		],
		"description": "creates a new join by mapping elements. 1-index-based mapping"
	},
	"Join operator": {
		"prefix": "joi",
		"body": [
			"join(${1:first},${2:second})"
		],
		"description": "joins one or more musical objects as one"
	},
	"Key trigger creator": {
		"prefix": "onk",
		"body": [
			"onkey(${1:key},${2:playable-or-evaluatable-or-nil})"
		],
		"description": "Assign a playable to a key.\nIf this key is pressed the playable will start. \nIf pressed again, the play will stop.\nRemove the assignment using the value nil for the playable"
	},
	"Loop creator": {
		"prefix": "loo",
		"body": [
			"loop(${1:object})"
		],
		"description": "create a new loop from one or more musical objects"
	},
	"MIDI channel selector": {
		"prefix": "chan",
		"body": [
			"channel(${1:number},${2:sequenceable})"
		],
		"description": "select a MIDI channel, must be in [1..16]; must be a top-level operator"
	},
	"MIDI device selector": {
		"prefix": "dev",
		"body": [
			"device(${1:number},${2:sequenceable})"
		],
		"description": "select a MIDI device from the available device IDs; must become before channel"
	},
	"Multi track creator": {
		"prefix": "mtr",
		"body": [
			"multitrack(${1:track})"
		],
		"description": "create a multi-track object from zero or more tracks"
	},
	"Note creator": {
		"prefix": "no",
		"body": [
			"note('${1:letter}')"
		],
		"description": "create a Note using this \u003ca href=\"/docs/reference/notations/#note\"\u003eformat\u003c/a\u003e"
	},
	"Octave Map operator": {
		"prefix": "octavem",
		"body": [
			"octavemap('${1:int2int}',${2:object})"
		],
		"description": "create a sequence with notes for which the order and the octaves are changed"
	},
	"Octave operator": {
		"prefix": "oct",
		"body": [
			"octave(${1:offset},${2:sequenceable})"
		],
		"description": "change the pitch of notes by steps of 12 semitones for one or more musical objects"
	},
	"Play musical objects in order. Use sync() for parallel playing": {
		"prefix": "pla",
		"body": [
			"play(${1:sequenceable})"
		],
		"description": "play all musical objects"
	},
	"Probabilistic music object.": {
		"prefix": "prob",
		"body": [
			"prob(${1:perc},${2:note-or-sequenceable})"
		],
		"description": ""
	},
	"Random generator": {
		"prefix": "ra",
		"body": [
			"random(${1:from},${2:to})"
		],
		"description": "create a random integer generator. Use next() to generate a new integer"
	},
	"Repeat operator": {
		"prefix": "rep",
		"body": [
			"repeat(${1:times},${2:sequenceables})"
		],
		"description": "repeat one or more musical objects a number of times"
	},
	"Reverse operator": {
		"prefix": "rev",
		"body": [
			"reverse(${1:sequenceable})"
		],
		"description": "reverse the (groups of) notes in a sequence"
	},
	"Scale creator": {
		"prefix": "sc",
		"body": [
			"scale(${1:octaves},'${2:scale-syntax}')"
		],
		"description": "create a Scale using this \u003ca href=\"/docs/reference/notations/#scale\"\u003eformat\u003c/a\u003e"
	},
	"Sequence creator": {
		"prefix": "seq",
		"body": [
			"sequence('${1:space-separated-notes}')"
		],
		"description": "create a Sequence using this \u003ca href=\"/docs/reference/notations/#sequence\"\u003eformat\u003c/a\u003e"
	},
	"Sequence modifier": {
		"prefix": "resq",
		"body": [
			"resequence('${1:space-separated-1-based-indices}',${2:sequenceable})"
		],
		"description": "creates a modifier of sequence notes by index (1-based)"
	},
	"Sequence of chords creator": {
		"prefix": "pro",
		"body": [
			"chordsequence('${1:chords}')"
		],
		"description": "create a Chord sequence using this \u003ca href=\"/docs/reference/notations/#chordsequence\"\u003eformat\u003c/a\u003e"
	},
	"Stretch operator": {
		"prefix": "st",
		"body": [
			"stretch(${1:factor},${2:object})"
		],
		"description": "stretches the duration of musical object(s) with a factor. If the factor \u003c 1 then duration is shortened"
	},
	"Synchroniser creator": {
		"prefix": "syn",
		"body": [
			"sync(${1:object})"
		],
		"description": "Synchronise playing musical objects. Use play() for serial playing"
	},
	"Track creator": {
		"prefix": "tr",
		"body": [
			"track('${1:title}',${2:midi-channel}, onbar(1,${3:object}))"
		],
		"description": "create a named track for a given MIDI channel with a musical object"
	},
	"Track modifier": {
		"prefix": "onbar",
		"body": [
			"onbar(${1:bar},${2:object})"
		],
		"description": "puts a musical object on a track to start at a specific bar"
	},
	"Transpose operator": {
		"prefix": "tran",
		"body": [
			"transpose(${1:semitones},${2:sequenceable})"
		],
		"description": "change the pitch with a delta of semitones"
	},
	"Transpose operator [pitch]": {
		"prefix": "tran",
		"body": [
			"transpose(${1:semitones},${2:sequenceable})"
		],
		"description": "change the pitch with a delta of semitones"
	},
	"Undo dynamic operator": {
		"prefix": "und",
		"body": [
			"undynamic(${1:sequenceable})"
		],
		"description": "set the dymamic to normal for all notes in a musical object"
	},
	"Ungroup operator": {
		"prefix": "ung",
		"body": [
			"ungroup(${1:sequenceable})"
		],
		"description": "undo any grouping of notes from one or more musical objects"
	},
	"Velocity Map operator": {
		"prefix": "velocitym",
		"body": [
			"velocitymap('${1:int2int}',${2:object})"
		],
		"description": "create a sequence with notes for which the order and the velocities are changed. Velocity 0 means no change."
	}
}
