{
	"Beats Per Minute": {
		"prefix": "bpm",
		"body": [
			"bpm(${1:beats-per-minute})"
		],
		"description": "set the Beats Per Minute [1..300]; default is 120"
	},
	"Beats in a Bar": {
		"prefix": "biab",
		"body": [
			"biab(${1:beats-in-a-bar})"
		],
		"description": "set the Beats in a Bar [1..6]; default is 4"
	},
	"Chord creator": {
		"prefix": "cho",
		"body": [
			"chord('${1:note}')"
		],
		"description": "create a Chord from its string \u003ca href=\"/index.html#chord-not\"\u003enotation\u003c/a\u003e"
	},
	"Flatten modifier": {
		"prefix": "flat",
		"body": [
			"flatten(${1:sequenceable})"
		],
		"description": "flatten all operations on a musical object to a new sequence"
	},
	"Index getter": {
		"prefix": "at",
		"body": [
			"at(${1:index},${2:object})"
		],
		"description": "create an index getter (1-based) to select a musical object"
	},
	"Integer Sequence Map modifier": {
		"prefix": "ind",
		"body": [
			"sequencemap('${1:space-separated-1-based-indices}',${2:sequenceable})"
		],
		"description": "create a Mapper of sequence notes by index (1-based)"
	},
	"Integer interval creator": {
		"prefix": "int",
		"body": [
			"interval(${1:from},${2:to},${3:by})"
		],
		"description": "create an integer repeating interval (from,to,by,method). Default method is 'repeat', Use next() to get a new integer"
	},
	"Join modifier": {
		"prefix": "joi",
		"body": [
			"join(${1:first},${2:second})"
		],
		"description": "join two or more musical objects"
	},
	"Loop creator ; must be assigned to a variable": {
		"prefix": "loo",
		"body": [
			"lp_${1:object} = loop(${1:object})"
		],
		"description": "create a new loop from one or more objects"
	},
	"Loop runner": {
		"prefix": "beg",
		"body": [
			"begin(${1:loop})"
		],
		"description": "begin loop(s). Ignore if it was running."
	},
	"MIDI channel modifier ; must be a top-level modifier": {
		"prefix": "chan",
		"body": [
			"channel(${1:number},${2:sequenceable})"
		],
		"description": "select a MIDI channel, must be in [0..16]"
	},
	"Note creator": {
		"prefix": "no",
		"body": [
			"note('${1:letter}')"
		],
		"description": "create a Note  from its string \u003ca href=\"/index.html#note-not\"\u003enotation\u003c/a\u003e"
	},
	"Note duration modifier": {
		"prefix": "dur",
		"body": [
			"duration(${1:object},${2:object})"
		],
		"description": "Creates a new modified musical object for which the duration of all notes are changed.\nThe first parameter controls the length (duration) of the note.\nIf the parameter is greater than 0 then the note duration is set to a fixed value, e.g. 4=quarter,1=whole.\nIf the parameter is less than 1 then the note duration is scaled with a value, e.g. 0.5 will make a quarter ¼ into an eight ⅛\n"
	},
	"Octave Mapper modifier": {
		"prefix": "octavem",
		"body": [
			"octavemap('${1:int2int}',${2:object})"
		],
		"description": "create a sequence with notes for which order and the octaves are changed"
	},
	"Octave modifier": {
		"prefix": "oct",
		"body": [
			"octave(${1:offet},${2:sequenceable})"
		],
		"description": "changes the pitch of notes by steps of 12 semitones"
	},
	"Parallel modifier": {
		"prefix": "par",
		"body": [
			"parallel(${1:sequenceable})"
		],
		"description": "create a new sequence in which all notes of a musical object are synched in time"
	},
	"Pitch modifier": {
		"prefix": "pit",
		"body": [
			"pitch(${1:semitones},${2:sequenceable})"
		],
		"description": "change the pitch with a delta of semitones"
	},
	"Player (background)": {
		"prefix": "go",
		"body": [
			"go(${1:sequenceable})"
		],
		"description": "play all musical objects in parallel"
	},
	"Player (foreground)": {
		"prefix": "pla",
		"body": [
			"play(${1:sequenceable})"
		],
		"description": "play musical objects such as Note,Chord,Sequence,..."
	},
	"Recorder": {
		"prefix": "rec",
		"body": [
			"record(${1:input-device-id},${1:seconds-inactivity})"
		],
		"description": "creates a recorded sequence of notes from a MIDI device"
	},
	"Repeat modifier": {
		"prefix": "rep",
		"body": [
			"repeat(${1:times},${2:sequenceable})"
		],
		"description": "repeat the musical object a number of times"
	},
	"Reverse modifier": {
		"prefix": "rev",
		"body": [
			"reverse(${1:sequenceable})"
		],
		"description": "reverse the (groups of) notes in a sequence"
	},
	"Scale creator": {
		"prefix": "sc",
		"body": [
			"scale(${1:octaves},'${2:note}')"
		],
		"description": "create a Scale using a starting Note and type indicator (Major,minor)"
	},
	"Sequence creator": {
		"prefix": "seq",
		"body": [
			"sequence('${1:space-separated-notes}')"
		],
		"description": "create a Sequence from (space separated) notes"
	},
	"Serial modifier": {
		"prefix": "ser",
		"body": [
			"serial(${1:sequenceable})"
		],
		"description": "serialise any grouping of notes in one or more musical objects"
	},
	"Undo dynamic modifier": {
		"prefix": "und",
		"body": [
			"undynamic(${1:sequenceable})"
		],
		"description": "undynamic all the notes in a musical object"
	},
	"create a Chord progression": {
		"prefix": "pro",
		"body": [
			"progression('${1:chords}')"
		],
		"description": ""
	},
	"the notes being played": {
		"prefix": "ech",
		"body": [
			"echo(${0:true|false})"
		],
		"description": "echo the notes being played; default is true"
	}
}
